// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.21.12
// source: tickets_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *---------------------------------------------------------------------------------------------*
// *-------------------------------- Common Request Type ----------------------------------------*
// *---------------------------------------------------------------------------------------------*
type DateRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeFrom string `protobuf:"bytes,1,opt,name=range_from,json=rangeFrom,proto3" json:"range_from,omitempty"`
	RangeTo   string `protobuf:"bytes,2,opt,name=range_to,json=rangeTo,proto3" json:"range_to,omitempty"`
}

func (x *DateRange) Reset() {
	*x = DateRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickets_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateRange) ProtoMessage() {}

func (x *DateRange) ProtoReflect() protoreflect.Message {
	mi := &file_tickets_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateRange.ProtoReflect.Descriptor instead.
func (*DateRange) Descriptor() ([]byte, []int) {
	return file_tickets_service_proto_rawDescGZIP(), []int{0}
}

func (x *DateRange) GetRangeFrom() string {
	if x != nil {
		return x.RangeFrom
	}
	return ""
}

func (x *DateRange) GetRangeTo() string {
	if x != nil {
		return x.RangeTo
	}
	return ""
}

type ScoresByCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scores []*ScoresByCategory `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (x *ScoresByCategoryResponse) Reset() {
	*x = ScoresByCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickets_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoresByCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoresByCategoryResponse) ProtoMessage() {}

func (x *ScoresByCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tickets_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoresByCategoryResponse.ProtoReflect.Descriptor instead.
func (*ScoresByCategoryResponse) Descriptor() ([]byte, []int) {
	return file_tickets_service_proto_rawDescGZIP(), []int{1}
}

func (x *ScoresByCategoryResponse) GetScores() []*ScoresByCategory {
	if x != nil {
		return x.Scores
	}
	return nil
}

type ScoresByCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryName string       `protobuf:"bytes,1,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
	RatingsCount int32        `protobuf:"varint,2,opt,name=ratings_count,json=ratingsCount,proto3" json:"ratings_count,omitempty"`
	DateScores   []*DateScore `protobuf:"bytes,3,rep,name=date_scores,json=dateScores,proto3" json:"date_scores,omitempty"`
	TotalScore   int32        `protobuf:"varint,4,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
}

func (x *ScoresByCategory) Reset() {
	*x = ScoresByCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickets_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoresByCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoresByCategory) ProtoMessage() {}

func (x *ScoresByCategory) ProtoReflect() protoreflect.Message {
	mi := &file_tickets_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoresByCategory.ProtoReflect.Descriptor instead.
func (*ScoresByCategory) Descriptor() ([]byte, []int) {
	return file_tickets_service_proto_rawDescGZIP(), []int{2}
}

func (x *ScoresByCategory) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ScoresByCategory) GetRatingsCount() int32 {
	if x != nil {
		return x.RatingsCount
	}
	return 0
}

func (x *ScoresByCategory) GetDateScores() []*DateScore {
	if x != nil {
		return x.DateScores
	}
	return nil
}

func (x *ScoresByCategory) GetTotalScore() int32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

type DateScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date  string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Score int32  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *DateScore) Reset() {
	*x = DateScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickets_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateScore) ProtoMessage() {}

func (x *DateScore) ProtoReflect() protoreflect.Message {
	mi := &file_tickets_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateScore.ProtoReflect.Descriptor instead.
func (*DateScore) Descriptor() ([]byte, []int) {
	return file_tickets_service_proto_rawDescGZIP(), []int{3}
}

func (x *DateScore) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DateScore) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ScoresByTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scores []*ScoresByTicket `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (x *ScoresByTicketResponse) Reset() {
	*x = ScoresByTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickets_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoresByTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoresByTicketResponse) ProtoMessage() {}

func (x *ScoresByTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tickets_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoresByTicketResponse.ProtoReflect.Descriptor instead.
func (*ScoresByTicketResponse) Descriptor() ([]byte, []int) {
	return file_tickets_service_proto_rawDescGZIP(), []int{4}
}

func (x *ScoresByTicketResponse) GetScores() []*ScoresByTicket {
	if x != nil {
		return x.Scores
	}
	return nil
}

type ScoresByTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId       int32                    `protobuf:"varint,1,opt,name=TicketId,proto3" json:"TicketId,omitempty"`
	CategoryScores []*CategoryAndScorePairs `protobuf:"bytes,2,rep,name=CategoryScores,proto3" json:"CategoryScores,omitempty"`
}

func (x *ScoresByTicket) Reset() {
	*x = ScoresByTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickets_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoresByTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoresByTicket) ProtoMessage() {}

func (x *ScoresByTicket) ProtoReflect() protoreflect.Message {
	mi := &file_tickets_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoresByTicket.ProtoReflect.Descriptor instead.
func (*ScoresByTicket) Descriptor() ([]byte, []int) {
	return file_tickets_service_proto_rawDescGZIP(), []int{5}
}

func (x *ScoresByTicket) GetTicketId() int32 {
	if x != nil {
		return x.TicketId
	}
	return 0
}

func (x *ScoresByTicket) GetCategoryScores() []*CategoryAndScorePairs {
	if x != nil {
		return x.CategoryScores
	}
	return nil
}

type CategoryAndScorePairs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryName string `protobuf:"bytes,1,opt,name=CategoryName,proto3" json:"CategoryName,omitempty"`
	Score        int32  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *CategoryAndScorePairs) Reset() {
	*x = CategoryAndScorePairs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickets_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryAndScorePairs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryAndScorePairs) ProtoMessage() {}

func (x *CategoryAndScorePairs) ProtoReflect() protoreflect.Message {
	mi := &file_tickets_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryAndScorePairs.ProtoReflect.Descriptor instead.
func (*CategoryAndScorePairs) Descriptor() ([]byte, []int) {
	return file_tickets_service_proto_rawDescGZIP(), []int{6}
}

func (x *CategoryAndScorePairs) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *CategoryAndScorePairs) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// *---------------------------------------------------------------------------------------------*
// *---------------------- Structure for Getting Overal Quality Score ---------------------------*
// *---------------------------------------------------------------------------------------------*
type QualityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score int32 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *QualityResponse) Reset() {
	*x = QualityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickets_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityResponse) ProtoMessage() {}

func (x *QualityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tickets_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityResponse.ProtoReflect.Descriptor instead.
func (*QualityResponse) Descriptor() ([]byte, []int) {
	return file_tickets_service_proto_rawDescGZIP(), []int{7}
}

func (x *QualityResponse) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

var File_tickets_service_proto protoreflect.FileDescriptor

var file_tickets_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x22, 0x45,
	0x0a, 0x18, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x35, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x41, 0x0a, 0x16, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x42, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x42, 0x79, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x0e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x42, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x6e, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x0e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x15, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x27, 0x0a,
	0x0f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x32, 0xd1, 0x01, 0x0a, 0x15, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x44, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x0a, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x42, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0a, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x42, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0a, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tickets_service_proto_rawDescOnce sync.Once
	file_tickets_service_proto_rawDescData = file_tickets_service_proto_rawDesc
)

func file_tickets_service_proto_rawDescGZIP() []byte {
	file_tickets_service_proto_rawDescOnce.Do(func() {
		file_tickets_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_tickets_service_proto_rawDescData)
	})
	return file_tickets_service_proto_rawDescData
}

var file_tickets_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_tickets_service_proto_goTypes = []interface{}{
	(*DateRange)(nil),                // 0: DateRange
	(*ScoresByCategoryResponse)(nil), // 1: ScoresByCategoryResponse
	(*ScoresByCategory)(nil),         // 2: ScoresByCategory
	(*DateScore)(nil),                // 3: DateScore
	(*ScoresByTicketResponse)(nil),   // 4: ScoresByTicketResponse
	(*ScoresByTicket)(nil),           // 5: ScoresByTicket
	(*CategoryAndScorePairs)(nil),    // 6: CategoryAndScorePairs
	(*QualityResponse)(nil),          // 7: QualityResponse
}
var file_tickets_service_proto_depIdxs = []int32{
	2, // 0: ScoresByCategoryResponse.scores:type_name -> ScoresByCategory
	3, // 1: ScoresByCategory.date_scores:type_name -> DateScore
	5, // 2: ScoresByTicketResponse.scores:type_name -> ScoresByTicket
	6, // 3: ScoresByTicket.CategoryScores:type_name -> CategoryAndScorePairs
	0, // 4: TicketAnalysisService.GetAggregatedCategoryScores:input_type -> DateRange
	0, // 5: TicketAnalysisService.GetScoresByTicket:input_type -> DateRange
	0, // 6: TicketAnalysisService.GetScoreOveralForQuality:input_type -> DateRange
	1, // 7: TicketAnalysisService.GetAggregatedCategoryScores:output_type -> ScoresByCategoryResponse
	4, // 8: TicketAnalysisService.GetScoresByTicket:output_type -> ScoresByTicketResponse
	7, // 9: TicketAnalysisService.GetScoreOveralForQuality:output_type -> QualityResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_tickets_service_proto_init() }
func file_tickets_service_proto_init() {
	if File_tickets_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tickets_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickets_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoresByCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickets_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoresByCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickets_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickets_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoresByTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickets_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoresByTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickets_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryAndScorePairs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickets_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tickets_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tickets_service_proto_goTypes,
		DependencyIndexes: file_tickets_service_proto_depIdxs,
		MessageInfos:      file_tickets_service_proto_msgTypes,
	}.Build()
	File_tickets_service_proto = out.File
	file_tickets_service_proto_rawDesc = nil
	file_tickets_service_proto_goTypes = nil
	file_tickets_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TicketAnalysisServiceClient is the client API for TicketAnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TicketAnalysisServiceClient interface {
	GetAggregatedCategoryScores(ctx context.Context, in *DateRange, opts ...grpc.CallOption) (*ScoresByCategoryResponse, error)
	GetScoresByTicket(ctx context.Context, in *DateRange, opts ...grpc.CallOption) (*ScoresByTicketResponse, error)
	GetScoreOveralForQuality(ctx context.Context, in *DateRange, opts ...grpc.CallOption) (*QualityResponse, error)
}

type ticketAnalysisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketAnalysisServiceClient(cc grpc.ClientConnInterface) TicketAnalysisServiceClient {
	return &ticketAnalysisServiceClient{cc}
}

func (c *ticketAnalysisServiceClient) GetAggregatedCategoryScores(ctx context.Context, in *DateRange, opts ...grpc.CallOption) (*ScoresByCategoryResponse, error) {
	out := new(ScoresByCategoryResponse)
	err := c.cc.Invoke(ctx, "/TicketAnalysisService/GetAggregatedCategoryScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketAnalysisServiceClient) GetScoresByTicket(ctx context.Context, in *DateRange, opts ...grpc.CallOption) (*ScoresByTicketResponse, error) {
	out := new(ScoresByTicketResponse)
	err := c.cc.Invoke(ctx, "/TicketAnalysisService/GetScoresByTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketAnalysisServiceClient) GetScoreOveralForQuality(ctx context.Context, in *DateRange, opts ...grpc.CallOption) (*QualityResponse, error) {
	out := new(QualityResponse)
	err := c.cc.Invoke(ctx, "/TicketAnalysisService/GetScoreOveralForQuality", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketAnalysisServiceServer is the server API for TicketAnalysisService service.
type TicketAnalysisServiceServer interface {
	GetAggregatedCategoryScores(context.Context, *DateRange) (*ScoresByCategoryResponse, error)
	GetScoresByTicket(context.Context, *DateRange) (*ScoresByTicketResponse, error)
	GetScoreOveralForQuality(context.Context, *DateRange) (*QualityResponse, error)
}

// UnimplementedTicketAnalysisServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTicketAnalysisServiceServer struct {
}

func (*UnimplementedTicketAnalysisServiceServer) GetAggregatedCategoryScores(context.Context, *DateRange) (*ScoresByCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregatedCategoryScores not implemented")
}
func (*UnimplementedTicketAnalysisServiceServer) GetScoresByTicket(context.Context, *DateRange) (*ScoresByTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoresByTicket not implemented")
}
func (*UnimplementedTicketAnalysisServiceServer) GetScoreOveralForQuality(context.Context, *DateRange) (*QualityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoreOveralForQuality not implemented")
}

func RegisterTicketAnalysisServiceServer(s *grpc.Server, srv TicketAnalysisServiceServer) {
	s.RegisterService(&_TicketAnalysisService_serviceDesc, srv)
}

func _TicketAnalysisService_GetAggregatedCategoryScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketAnalysisServiceServer).GetAggregatedCategoryScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TicketAnalysisService/GetAggregatedCategoryScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketAnalysisServiceServer).GetAggregatedCategoryScores(ctx, req.(*DateRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketAnalysisService_GetScoresByTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketAnalysisServiceServer).GetScoresByTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TicketAnalysisService/GetScoresByTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketAnalysisServiceServer).GetScoresByTicket(ctx, req.(*DateRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketAnalysisService_GetScoreOveralForQuality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketAnalysisServiceServer).GetScoreOveralForQuality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TicketAnalysisService/GetScoreOveralForQuality",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketAnalysisServiceServer).GetScoreOveralForQuality(ctx, req.(*DateRange))
	}
	return interceptor(ctx, in, info, handler)
}

var _TicketAnalysisService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TicketAnalysisService",
	HandlerType: (*TicketAnalysisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAggregatedCategoryScores",
			Handler:    _TicketAnalysisService_GetAggregatedCategoryScores_Handler,
		},
		{
			MethodName: "GetScoresByTicket",
			Handler:    _TicketAnalysisService_GetScoresByTicket_Handler,
		},
		{
			MethodName: "GetScoreOveralForQuality",
			Handler:    _TicketAnalysisService_GetScoreOveralForQuality_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tickets_service.proto",
}
